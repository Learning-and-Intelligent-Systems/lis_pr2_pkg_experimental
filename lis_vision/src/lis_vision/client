#!/usr/bin/env python
# Author: Ariel Anders
"""
This file extends object_recognition_ros client program to 
continuously poll requests from the object recognition server
"""
import actionlib
import argparse
import rospy
import sys
from object_recognition_msgs.msg import \
        ObjectRecognitionAction, ObjectRecognitionGoal

def on_result(status, result):
    print result

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=\
            'Client that queries the ORK server and prints the output. '
            'to start your server and launch that file for testing.')
    args = parser.parse_args(args=rospy.myargv(argv=sys.argv)[1:])

    rospy.init_node('recognition_client')
    client = actionlib.SimpleActionClient(\
            'recognize_objects', ObjectRecognitionAction)
    print "waiting for server"
    client.wait_for_server()
    print "found server"


    goal = ObjectRecognitionGoal()
    
    while not rospy.is_shutdown():
        print "sending goal!"

        start = rospy.Time.now()  # for checking the round trip time.
        client.send_goal(goal, done_cb=on_result)
        client.wait_for_result()  # wait indefinitely for a result

        # print out the round trip time.
        print "Time for 1 detection:", (rospy.Time.now() - start).to_sec()
        rospy.sleep(1)
